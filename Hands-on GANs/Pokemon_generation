import os
from PIL import Image
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader

class CustomDataset(Dataset):
    def __init__(self, root_dir, transform=None):
        self.root_dir = root_dir
        self.transform = transform
        self.image_paths = []
        self.labels = []
        self.label_map = {}  # 字符串到数字的映射
        self.inverse_label_map = {}  # 数字到字符串的映射

        label_dirs = os.listdir(root_dir)
        for idx, label_dir in enumerate(label_dirs):
            self.label_map[label_dir] = idx
            self.inverse_label_map[idx] = label_dir
            label_path = os.path.join(root_dir, label_dir)
            if os.path.isdir(label_path):
                for img_file in os.listdir(label_path):
                    if img_file.endswith('.jpg'):
                        self.image_paths.append(os.path.join(label_path, img_file))
                        self.labels.append(idx)  # 使用数字标签

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        img_path = self.image_paths[idx]
        image = Image.open(img_path).convert('RGB')  # 使用彩色图像
        label = self.labels[idx]

        if self.transform:
            image = self.transform(image)

        return image, label
